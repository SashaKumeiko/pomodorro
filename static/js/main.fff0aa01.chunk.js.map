{"version":3,"sources":["components/styles.js","components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","div","FlexContainer","Word","Indicator","StyledButton","button","StyledControlButton","TimerWrapper","GroupWrapper","ButtonsWrapper","Break","breakLength","incrementBreak","decrementBreak","breakLengthMinutes","moment","duration","asMinutes","id","onClick","Session","sessionLength","decrementSession","incrementSession","sessionLengthMinutes","momentDurationFormatSetup","TimeLeft","timeLeft","timerLabel","timerHandler","startStopLabel","timeLeftInMinutes","format","trim","App","useState","setBrakeLength","setSessionLength","setTimeLeft","isRunning","setIsRunning","intervalId","setIntervalId","currentTypeOfTimer","setCurrentTypeOfTimer","audioElement","useRef","useEffect","newBrake","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","current","play","load","newSession","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fff0aa01.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledContainer = styled.div`\r\n  background: #e34f3d;\r\n  padding: 100px 20px 20px;\r\n  color: #ffffff;\r\n  font-family: Comic Sans MS, sans-serif;\r\n  font-size: 36px;\r\n  height: 500px;\r\n\r\n`;\r\n\r\nexport const FlexContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nexport const Word = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nexport const Indicator = styled.div`\r\nfont-family:Comic Sans MS, sans-serif;\r\ntext-align:center;\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  width: 50px;\r\n  padding: 8px 0;\r\n  font-family: Comic Sans MS, sans-serif;\r\n  font-weight: 300;\r\n  background: #fffcfc;\r\n  border: none;\r\n  font-size: 28px;\r\n  border-radius: 3px;\r\n  margin:10px;\r\n  \r\n`;\r\n\r\nexport const StyledControlButton = styled(StyledButton)`\r\n  && {\r\n    width: 100px;\r\n  }\r\n  text-align:center;\r\n  color: green;\r\n`;\r\n\r\nexport const TimerWrapper = styled.div`\r\npadding:80px;\r\nheight:200px;\r\nwidth:200px;\r\nborder-radius:200px;\r\nbackground:#5555ff;\r\ndisplay:flex;\r\nflex-direction:column;\r\nalign-items: center;\r\njustify-content: center;\r\n`\r\n\r\nexport const GroupWrapper = styled.div`\r\ndisplay:flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items:center;\r\n`\r\nexport const ButtonsWrapper = styled.div`\r\ndisplay:flex;` ","import React from 'react';\r\nimport moment from 'moment';\r\nimport {Word, Indicator, StyledButton, GroupWrapper, ButtonsWrapper} from './styles';\r\n\r\nconst Break = ({breakLength, incrementBreak, decrementBreak}) => {\r\n  const breakLengthMinutes = moment.duration(breakLength, 's').asMinutes();\r\n\r\n  return (\r\n    <GroupWrapper>\r\n      <Word id=\"break-label\"> Break </Word>\r\n      <Indicator id=\"break-length\"> {breakLengthMinutes} </Indicator>\r\n      <ButtonsWrapper>\r\n        <StyledButton id=\"break-decrement\" onClick={decrementBreak}>\r\n          -\r\n        </StyledButton>\r\n        <StyledButton id=\"break-increment\" onClick={incrementBreak}>\r\n          +\r\n        </StyledButton>\r\n      </ButtonsWrapper>\r\n    </GroupWrapper>\r\n  );\r\n};\r\n\r\nexport default Break;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport {Word, Indicator, StyledButton, GroupWrapper, ButtonsWrapper} from './styles';\r\n\r\nconst Session = ({sessionLength, decrementSession, incrementSession}) => {\r\n  const sessionLengthMinutes = moment.duration(sessionLength, 's').asMinutes();\r\n\r\n  return (\r\n    <GroupWrapper>\r\n      <Word id=\"session-label\"> Session </Word>\r\n      <Indicator id=\"session-length\"> {sessionLengthMinutes} </Indicator>\r\n      <ButtonsWrapper>\r\n      <StyledButton id=\"session-decrement\" onClick={decrementSession}>\r\n        -\r\n      </StyledButton>\r\n      <StyledButton id=\"session-increment\" onClick={incrementSession}>\r\n        +\r\n      </StyledButton>\r\n      </ButtonsWrapper>\r\n    </GroupWrapper>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport momentDurationFormatSetup from 'moment-duration-format';\r\nimport {Indicator, StyledControlButton, GroupWrapper} from './styles';\r\n\r\nmomentDurationFormatSetup(moment);\r\n\r\nconst TimeLeft = ({\r\n  timeLeft,\r\n  timerLabel,\r\n  timerHandler,\r\n  startStopLabel,\r\n}) => {\r\n  const timeLeftInMinutes = moment\r\n    .duration(timeLeft, 's')\r\n    .format('mm:ss', {trim: false});\r\n\r\n  return (\r\n    <GroupWrapper>\r\n      <Indicator id=\"timer-label\">{timerLabel}</Indicator>\r\n      <Indicator id=\"time-left\">{timeLeftInMinutes}</Indicator>\r\n      <StyledControlButton id=\"start_stop\" onClick={timerHandler}>\r\n        {startStopLabel}\r\n      </StyledControlButton>\r\n    </GroupWrapper>\r\n  );\r\n};\r\n\r\nexport default TimeLeft;\r\n","import React, {useState, useEffect, useRef} from 'react';\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\nimport {StyledContainer, StyledControlButton, FlexContainer, TimerWrapper} from './components/styles';\n\nfunction App() {\n  const [breakLength, setBrakeLength] = useState(300);\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n  const [isRunning, setIsRunning] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [currentTypeOfTimer, setCurrentTypeOfTimer] = useState('Session');\n\n  const audioElement = useRef(null)\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  const decrementBreak = () => {\n    const newBrake = breakLength - 60;\n    if (newBrake > 0) setBrakeLength(newBrake)\n  };\n  const incrementBreak = () => {\n    const newBrake = breakLength + 60\n    if (newBrake <= 3600) setBrakeLength(newBrake)\n  };\n\n  const decrementSession = () => {\n    const newSession = sessionLength - 60;\n    if (newSession>0) setSessionLength(newSession);\n  };\n  const incrementSession = () => {\n    const newSession = sessionLength + 60;\n    if(newSession<=3600) setSessionLength(newSession);\n  };\n  const timerHandler = () => {\n    if (isRunning) {\n      clearInterval(intervalId);\n      setIsRunning(false);\n      setIntervalId(null);\n    } else {\n      setIsRunning(true);\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => {\n          let newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) return newTimeLeft;\n          audioElement.current.play()\n          if (currentTypeOfTimer === 'Session') {\n            setCurrentTypeOfTimer('Break');\n           return breakLength;\n          } else if (currentTypeOfTimer === 'Break') {\n            setCurrentTypeOfTimer('Session');\n            return sessionLength;\n          }\n        });\n      }, 1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n  const handleResetButton = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setCurrentTypeOfTimer('Session');\n    setSessionLength(1500);\n    setBrakeLength(300);\n    setTimeLeft(1500);\n    setIsRunning(false);\n    audioElement.current.load()\n  };\n\n  return (\n    <div>\n      <StyledContainer>\n      <FlexContainer>\n        <Break \n          breakLength={breakLength}\n          incrementBreak={incrementBreak}\n          decrementBreak={decrementBreak}\n        />\n        <TimerWrapper>\n        <TimeLeft\n          startStopLabel={isRunning ? 'Stop' : 'Start'}\n          timerLabel={currentTypeOfTimer}\n          timerHandler={timerHandler}\n          timeLeft={timeLeft}\n        />\n        <StyledControlButton id=\"reset\" onClick={handleResetButton}>\n            Reset\n          </StyledControlButton>\n        </TimerWrapper>\n        <Session\n          sessionLength={sessionLength}\n          incrementSession={incrementSession}\n          decrementSession={decrementSession}\n        />\n        </FlexContainer>\n        <>\n          \n          <audio id='beep' ref={audioElement}>\n          <source src='https://www.soundjay.com/nature/sounds/lake-waves-01.mp3' type='audio/mpeg'/>\n          </audio>\n        </>\n      </StyledContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}